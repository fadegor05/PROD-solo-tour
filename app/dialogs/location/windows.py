from typing import Dict

from aiogram_dialog import Window, Data, DialogManager
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import Back, Cancel, Button, Next
from aiogram_dialog.widgets.media import DynamicMedia
from aiogram_dialog.widgets.text import Const, Format

from app.dialogs.location import keyboards, selected, states, getters
from app.misc.constants import SwitchToWindow


def locations_window():
    return Window(
        DynamicMedia('image'),
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ üåé'),
        keyboards.paginated_locations(selected.on_chosen_location),
        Button(Const('üìç –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é'), 'create_location', selected.on_create_location),
        Cancel(Const('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')),
        state=states.LocationMenu.select_location,
        getter=getters.get_locations,
    )


def location_info_window():
    return Window(
        Format('–õ–æ–∫–∞—Ü–∏—è {city}, {country} üìç\n\n{weather_dates_type}\n{weather}\nüå° {temperature} ¬∞C\n\n–í—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è ‚è≥\n{arrive_at} - {departure_at}'),
        Button(Const('üèõÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–µ—Å—Ç–∞'), 'view_places', selected.on_view_places),
        Button(Const('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é'), 'delete_location', selected.on_delete_location),
        Back(Const('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')),
        state=states.LocationMenu.select_action,
        getter=getters.get_location,
    )


def location_delete_confirm():
    return Window(
        Const('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é? üóëÔ∏è'),
        Button(Const('‚úÖ –î–∞'), 'delete_location_confirm', selected.on_delete_location_confirm),
        Cancel(Const('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')),
        state=states.DeleteLocation.delete_location
    )


def location_city_window():
    return Window(
        Const('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üó∫Ô∏è'),
        TextInput(
            id='location_enter_city',
            on_success=selected.on_entered_city
        ),
        state=states.CreateLocation.city
    )


def location_confirm_city_window():
    return Window(
        Format('{city}, {country} - –í–µ—Ä–Ω–æ? üåé'),
        Next(Const('‚úÖ –î–∞')),
        Back(Const('‚ùå –ù–µ—Ç')),
        getter=getters.get_city_confirm,
        state=states.CreateLocation.confirm_city
    )


def location_arrive_at_window():
    return Window(
        Const('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–±—ã—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 10/03/2024) üìÖ'),
        TextInput(
            id='location_enter_arrive_at',
            on_success=selected.on_entered_arrive_at
        ),
        state=states.CreateLocation.arrive_at
    )


def location_departure_at_window():
    return Window(
        Const('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 10/03/2024) üìÖ'),
        TextInput(
            id='location_enter_arrive_at',
            on_success=selected.on_entered_departure_at
        ),
        state=states.CreateLocation.departure_at
    )


async def on_process_result(data: Data, result: Dict, manager: DialogManager):
    if result:
        switch_to_window = result.get('switch_to_window')
        if switch_to_window == SwitchToWindow.SelectLocation:
            await manager.switch_to(states.LocationMenu.select_location)